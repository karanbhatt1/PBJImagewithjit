// src/main/java/com/example/MainApp.java (or similar)
package org.example; // Adjust package as needed

import Main.java; // Your listener
import com.example.parser.ImageScriptLexer;       // Generated by ANTLR
import com.example.parser.ImageScriptParser;      // Generated by ANTLR
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

// Make sure ImageUtils.java is compiled and accessible (e.g., in com.example.imagecore)
// If ImageUtils is in com.example.imagecore, add: import com.example.imagecore.ImageUtils;

public class MainApp {
    public static void main(String[] args) {
        String scriptFilePath = "myscript.is"; // Path to your script file

        // Create a dummy script file for testing if it doesn't exist
        File scriptFile = new File(scriptFilePath);
        if (!scriptFile.exists()) {
            System.out.println("Script file '" + scriptFilePath + "' not found. Creating a dummy script for demonstration.");
            // Ensure you have an input.png or the ImageUtils.main creates one
            // Call ImageUtils.main(new String[]{}) or ensure an input image exists for this script
            try {
                // Create a dummy input.png if ImageUtils.main isn't run first or it's not there
                File inputPng = new File("input.png");
                if (!inputPng.exists()) {
                    BufferedImage dummyInput = new BufferedImage(10,10,BufferedImage.TYPE_INT_RGB);
                    ImageUtils.saveImage(dummyInput, "input.png", "png");
                    System.out.println("Created dummy input.png for the script.");
                }

                String dummyScriptContent =
                        "// Image Processing Script Demo\n" +
                                "LOAD \"input.png\" AS originalImage;\n" +
                                "RESIZE originalImage WIDTH 150 HEIGHT 100 AS resizedImage;\n" +
                                "GRAYSCALE resizedImage AS grayImage;\n" +
                                "SAVE grayImage TO \"processed_gray.png\" FORMAT \"png\";\n" +
                                "ROTATE originalImage ANGLE 45 AS rotatedImage;\n" +
                                "SAVE rotatedImage TO \"processed_rotated.png\" FORMAT \"png\";\n" +
                                "FLIP originalImage HORIZONTAL AS flippedHImage;\n" +
                                "SAVE flippedHImage TO \"processed_flipped_h.png\" FORMAT \"png\";";
                Files.writeString(Paths.get(scriptFilePath), dummyScriptContent);
                System.out.println("Dummy script '" + scriptFilePath + "' created. Please re-run or edit it.");
            } catch (IOException e) {
                System.err.println("Could not create dummy script: " + e.getMessage());
                return;
            }
        }


        try {
            System.out.println("Reading script from: " + scriptFilePath);
            String scriptContent = Files.readString(Paths.get(scriptFilePath));

            System.out.println("\n--- Script Content ---");
            System.out.println(scriptContent);
            System.out.println("--- End Script Content ---\n");

            ImageScriptLexer lexer = new ImageScriptLexer(CharStreams.fromString(scriptContent));
            CommonTokenStream tokens = new CommonTokenStream(lexer);
            ImageScriptParser parser = new ImageScriptParser(tokens);

            ParseTree tree = parser.script(); // 'script' is the start rule in ImageScript.g4

            ImageProcessingScriptListener listener = new ImageProcessingScriptListener();
            ParseTreeWalker walker = new ParseTreeWalker();
            walker.walk(listener, tree);

            System.out.println("\nScript execution finished. Check the 'script_output_images' directory.");

        } catch (IOException e) {
            System.err.println("Error reading script file or processing: " + e.getMessage());
            e.printStackTrace();
        }
    }
}